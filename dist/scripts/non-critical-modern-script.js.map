{"version":3,"sources":["carousel.js"],"names":[],"mappingsfile":"non-critical-modern-script.js","sourcesContent":["'use strict';\r\n\r\n// Carousel for small & medium menu\r\n\r\n// ******** VARIABLES ******** //\r\n\r\n// Set the time interval for autoplay\r\nconst time = 5; //5 seconds\r\nconst timeInterval = time * 1000 / 100;\r\n\r\n// Get the elements in carousel\r\nconst carouselTrack = document.getElementById(\"carousel__track\");\r\nconst slides = document.getElementsByClassName(\"carousel__slide\");\r\nconst prevButton = document.querySelector(\".carousel__prev-button\");\r\nconst nextButton = document.querySelector(\".carousel__next-button\");\r\nconst playButton = document.querySelector(\".carousel__play-button\");\r\nconst pauseButton = document.querySelector(\".carousel__pause-button\");\r\nconst transitionButtons = document.querySelectorAll('.carousel__transition-button');\r\nconst progressList = document.querySelector(\".carousel__progress-list\");\r\nconst progressContainers = document.getElementsByClassName(\"carousel__progress-container\");\r\nconst progressBars = document.getElementsByClassName(\"carousel__progress-bar\");\r\nconst bar1 = document.getElementById(\"bar1\");\r\nconst bar2 = document.getElementById(\"bar2\");\r\nconst bar3 = document.getElementById(\"bar3\");\r\n// const bar4 = document.getElementById(\"bar4\");\r\n// const bar5 = document.getElementById(\"bar5\");\r\nconst video = document.querySelector(\".carousel__video\");\r\n\r\n\r\n// Create variables for progress bar\r\nlet currentProgressContainer = document.querySelector(\".carousel__progress-container.current-container\");\r\nlet currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\nlet width = 0, memo, dynamicFrame, i;\r\nlet isPlay = true;\r\n\r\n\r\n// ******** INITIALIZATION ******** //\r\n\r\n// Set attributes of the carousel track and the progress bar\r\nsetAttributes();\r\n\r\n// Initialize the slide number to the first slide\r\nlet slideNumber = 1;\r\nlet currentSlideNumber = 1; // Variable to keep track of the current slide\r\nlet isTransitioning = false; // Flag to indicate if a transition is in progress\r\nshowSlides(slideNumber);\r\nprogressStart();\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Add event listeners to previous and next buttons\r\nprevButton.addEventListener(\"click\", () => {\r\n  plusSlides(-1);\r\n});\r\n\r\nnextButton.addEventListener(\"click\", () => {\r\n  plusSlides(1);\r\n});\r\n\r\n// Add event listeners to play and pause buttons\r\npauseButton.addEventListener(\"click\", () => {\r\n  progressPause();\r\n  togglePlayPauseButtons();\r\n});\r\n\r\nplayButton.addEventListener(\"click\", () => {\r\n  progressResume();\r\n  togglePlayPauseButtons();\r\n});\r\n\r\n// Add event listeners to progress list\r\nprogressList.addEventListener('keydown', (event) => {\r\n  switch (event.key) {\r\n    case 'ArrowLeft':\r\n      plusSlides(-1);\r\n      focusProgress();\r\n      break;\r\n    case 'ArrowRight':\r\n      plusSlides(1);\r\n      focusProgress();\r\n      break;\r\n    case 'Home':\r\n      event.preventDefault();\r\n      currentSlide(1);\r\n      focusProgress();\r\n      break;\r\n    case 'End':\r\n      event.preventDefault();\r\n      currentSlide(3);\r\n      focusProgress();\r\n      break;\r\n  }\r\n});\r\n\r\n// Add event listeners to each progress container\r\nfor (let i = 0; i < progressContainers.length; i++) {\r\n  progressContainers[i].addEventListener(\"click\", () => {\r\n    currentSlide(1 + i);\r\n  });\r\n}\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to display the slide corresponding to the given index 'n'\r\nfunction showSlides(n) {\r\n  // For function plusSlides()\r\n  // If 'n' is greater than the number of slides or the current slide index is greater than the number of slides, reset to the first slide\r\n  if (n > slides.length) { slideNumber = 1 }\r\n  // If 'n' is less than 1, set the slide index to the last slide\r\n  if (n < 1) { slideNumber = slides.length }\r\n\r\n  // Reset everything to default\r\n  for (let i = 0; i < slides.length; i++) {\r\n    slides[i].classList.remove(\"current-slide\", \"previous-slide\", \"next-slide\");\r\n    slides[i].style.zIndex = '0';\r\n    progressContainers[i].classList.remove(\"current-container\");\r\n    progressBars[i].classList.remove(\"current-bar\");\r\n    progressBars[i].setAttribute(\"aria-selected\", \"false\");\r\n    progressBars[i].setAttribute(\"tabindex\", \"-1\");\r\n  }\r\n\r\n  // Show the current 2 slides - old current slide & new current slide\r\n  slides[currentSlideNumber - 1].style.zIndex = '7';\r\n  slides[slideNumber - 1].style.zIndex = '7';\r\n\r\n  let slideIndex = slideNumber - 1;\r\n  if (slideIndex !== 0 && slideIndex !== slides.length - 1) {\r\n    for (let i = 0; i < slides.length; i++) {\r\n      if (i < slideIndex) {\r\n        slides[i].classList.add(\"previous-slide\");\r\n      } else if (i === slideIndex) {\r\n        slides[i].classList.add(\"current-slide\");\r\n      } else {\r\n        slides[i].classList.add(\"next-slide\");\r\n      }\r\n    }\r\n  } else if (slideIndex === 0) {\r\n    for (let i = 0; i < slides.length; i++) {\r\n      if (i === slideIndex) {\r\n        slides[i].classList.add(\"current-slide\");\r\n      } else if (i === (slides.length - 1)) {\r\n        slides[i].classList.add(\"previous-slide\");\r\n      } else {\r\n        slides[i].classList.add(\"next-slide\");\r\n      }\r\n    }\r\n  } else if (slideIndex === slides.length - 1) {\r\n    for (let i = 0; i < slides.length; i++) {\r\n      if (i === 0) {\r\n        slides[i].classList.add(\"next-slide\");\r\n      } else if (i === slideIndex) {\r\n        slides[i].classList.add(\"current-slide\");\r\n      } else {\r\n        slides[i].classList.add(\"previous-slide\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // For slide 3 video to autoplay\r\n  if (slideIndex === 2) {\r\n    video.play();\r\n  } else {\r\n    video.pause();\r\n    video.currentTime = 0; // Reset video\r\n  }\r\n\r\n  // Show the current slide by adding the 'current-slide' class, and setting 'aria-current' attribute to true\r\n  progressContainers[slideNumber - 1].classList.add(\"current-container\");\r\n  progressBars[slideNumber - 1].classList.add(\"current-bar\");\r\n  progressBars[slideNumber - 1].setAttribute(\"aria-selected\", \"true\");\r\n  progressBars[slideNumber - 1].removeAttribute(\"tabindex\", \"-1\");\r\n\r\n  currentSlideNumber = slideNumber; // Update current slide index\r\n}\r\n\r\n// Function to start the progress initially\r\nfunction progressStart() {\r\n  frame();\r\n  dynamicFrame = setInterval(frame, timeInterval);\r\n}\r\n\r\n// Function for the progress bar to advance\r\nfunction frame() {\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  if (width < 100) {\r\n    width++;\r\n    currentProgressBar.style.width = width + \"%\";\r\n    memo = width;\r\n  } else {\r\n    clearInterval(dynamicFrame); // Clear the coming round\r\n    currentProgressBar.blur();\r\n    currentProgressBar.style.width = \"0.75rem\";\r\n    slideNumber++; // Advance to the next slide\r\n    showSlides(slideNumber);\r\n    checkDotColor(slideNumber);\r\n    resetProgressBar();\r\n    progressStart();\r\n    carouselTrack.setAttribute(\"aria-live\", \"off\");\r\n  }\r\n}\r\n\r\n// Function to change the dot color according to the slide position\r\nfunction checkDotColor(slideNumber) {\r\n  [...progressBars].forEach(bar => bar.classList.remove(\"finished-bar\"));\r\n  if (slideNumber === 2) {\r\n    bar1.classList.add(\"finished-bar\");\r\n  } else if (slideNumber === 3) {\r\n    bar1.classList.add(\"finished-bar\");\r\n    bar2.classList.add(\"finished-bar\");\r\n  } else if (slideNumber === 4) {\r\n    bar1.classList.add(\"finished-bar\");\r\n    bar2.classList.add(\"finished-bar\");\r\n    bar3.classList.add(\"finished-bar\");\r\n  } else if (slideNumber === 5) {\r\n    bar1.classList.add(\"finished-bar\");\r\n    bar2.classList.add(\"finished-bar\");\r\n    bar3.classList.add(\"finished-bar\");\r\n    bar4.classList.add(\"finished-bar\");\r\n  }\r\n}\r\n\r\n// Helper function to reset the progress bar\r\nfunction resetProgressBar() {\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  width = 0; // Reset width\r\n  currentProgressBar.style.width = width + \"%\";\r\n  memo = width;\r\n}\r\n\r\n// Function to pause the progress bar running\r\nfunction progressPause() {\r\n  carouselTrack.setAttribute(\"aria-live\", \"polite\");\r\n  isPlay = false;\r\n  clearInterval(dynamicFrame);\r\n}\r\n\r\n// Function to resume the progress bar running\r\nfunction progressResume() {\r\n  carouselTrack.setAttribute(\"aria-live\", \"off\");\r\n  isPlay = true;\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  width = memo; // Restore the width from memo\r\n  if (width < 100) {\r\n    currentProgressBar.style.width = width + \"%\";\r\n    progressStart();\r\n  } else {\r\n    currentProgressBar.style.width = \"0.75rem\";\r\n    slideNumber++; // Advance to the next slide\r\n    showSlides(slideNumber);\r\n    resetProgressBar();\r\n    progressStart();\r\n  }\r\n}\r\n\r\n// Helper function to pre-update the carousel initiated by user\r\nfunction preUpdateByUser() {\r\n  clearInterval(dynamicFrame);\r\n  carouselTrack.setAttribute(\"aria-live\", \"polite\");\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  currentProgressBar.style.width = \"0.75rem\";\r\n}\r\n\r\n// Function to advance the slide by a given number 'n' (positive or negative)\r\nfunction plusSlides(n) {\r\n  preUpdateByUser();\r\n  slideNumber += n;\r\n  showSlides(slideNumber);\r\n  postUpdateByUser();\r\n  slideTransition();\r\n}\r\n\r\n// Function to display the slide corresponding to a given dot\r\nfunction currentSlide(n) {\r\n  preUpdateByUser();\r\n  slideNumber = n;\r\n  showSlides(n);\r\n  postUpdateByUser();\r\n  slideTransition();\r\n}\r\n\r\n// Helper function to post-update the carousel initiated by user\r\nfunction postUpdateByUser() {\r\n  checkDotColor(slideNumber);\r\n  resetProgressBar();\r\n  if (isPlay) {\r\n    progressStart();\r\n  }\r\n}\r\n\r\n// Function to toggle play/pause button visibility and aria-hidden attribute\r\nfunction togglePlayPauseButtons() {\r\n  playButton.classList.toggle(\"hidden\");\r\n  pauseButton.classList.toggle(\"hidden\");\r\n  playButton.setAttribute('aria-hidden', playButton.classList.contains(\"hidden\"));\r\n  pauseButton.setAttribute('aria-hidden', pauseButton.classList.contains(\"hidden\"));\r\n}\r\n\r\n// Function to focus the progress container\r\nfunction focusProgress() {\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  currentProgressBar.focus();\r\n}\r\n\r\n// Function to stop further transition when the next button, previous button or current slide button is activated\r\nfunction slideTransition() {\r\n  // Check if a transition is already in progress\r\n  if (isTransitioning) return;\r\n\r\n  isTransitioning = true;\r\n  transitionButtons.forEach(button => button.classList.add('disabled'));\r\n\r\n  // Use a timeout to wait for the transition to complete\r\n  setTimeout(() => {\r\n    isTransitioning = false;\r\n    transitionButtons.forEach(button => button.classList.remove('disabled'));\r\n  }, 1000);\r\n}\r\n\r\n// Function to set attributes of the carousel track and the progress bar\r\nfunction setAttributes() {\r\n  for (i = 0; i < slides.length; i++) {\r\n    slides[i].setAttribute('id', `carousel-slide${i + 1}`);\r\n    slides[i].setAttribute('aria-label', `Slide ${i + 1} of ${slides.length}`);\r\n    progressBars[i].setAttribute('aria-label', `Slide ${i + 1}`);\r\n    progressBars[i].setAttribute('aria-controls', `carousel-slide${i + 1}`);\r\n  }\r\n}"]}